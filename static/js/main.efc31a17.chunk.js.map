{"version":3,"sources":["logo.png","theme.tsx","elements.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","theme","createMuiTheme","palette","primary","cyan","secondary","grey","background","paper","Logo","styles","useStyles","Avatar","className","avatar","variant","src","logo","PageContent","this","props","selected","StyledPaper","elevation","Grid","container","item","xs","StyledTitle","color","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","align","React","Component","AppHeader","AppBar","position","spacing","alignItems","justify","handler","NavigationBar","state","changeTab","bind","event","newValue","setState","Fragment","BottomNavigation","value","showLabels","onChange","BottomNavigationAction","label","icon","makeStyles","width","height","styled","Paper","marginTop","maxWidth","marginLeft","marginRight","marginBottom","require","App","ThemeProvider","md","changeContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.efc31a17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c136471d.png\";","import {createMuiTheme} from '@material-ui/core/styles';\nimport {cyan,grey} from \"@material-ui/core/colors\"\n\nconst theme = createMuiTheme({\n    palette:{\n        primary:cyan,\n        secondary:grey,\n        background:{\n            paper:\"#e0e0e0\"\n        }\n    }\n});\n\nexport default theme;","import React from 'react';\nimport {AppBar,Avatar, makeStyles,BottomNavigation,BottomNavigationAction,Typography,Paper,styled, Grid, Accordion, AccordionSummary, AccordionDetails} from '@material-ui/core';\nimport theme from './theme'\nimport MessageIcon from '@material-ui/icons/Message';\nimport InfoIcon from '@material-ui/icons/Info';\nimport PeopleIcon from '@material-ui/icons/People';\nimport MoodIcon from '@material-ui/icons/Mood';\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n\n// Component Classes\nexport function Logo(){\n    const styles = useStyles();\n    return(\n        <Avatar className={styles.avatar} variant=\"square\" src={logo}/>\n    )\n}\n\nexport class PageContent extends React.Component<appState_,{}>{\n\n  render(){\n    if(this.props.selected === \"commands\")\n      return(\n        <StyledPaper elevation={6}>\n          <Grid container>\n            <Grid item xs={12}>\n              <StyledTitle color=\"primary\" variant=\"h4\">List of Commands</StyledTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreIcon/>}>\n                  <Typography variant=\"h6\">Getting Started</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <ol>\n                      <li><Typography align=\"left\" variant=\"body1\">Use the command <b>-start</b></Typography></li>\n                      <li><Typography align=\"left\" variant=\"body1\">You will be asked to select the gender of your character. Type male (m) or female (f) before continuing.</Typography></li>\n                      <li><Typography align=\"left\" variant=\"body1\">Follow the avatar creation to the end, or else you will be locked from using other commands.</Typography></li>\n                      <li><Typography align=\"left\" variant=\"body1\">Do <b>-choose</b> followed by the name of the starter of your choice to get your first pokemon. Ex. -choose Charmander </Typography></li>\n                      <li><Typography align=\"left\" variant=\"body1\">You will start with 500 pokeballs and can purchase more by typing -shop to view the options currently available.</Typography></li>\n                  </ol>\n                </AccordionDetails>\n              </Accordion>\n            </Grid>\n            <Grid item xs={12}>\n              <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreIcon/>}>\n                  <Typography variant=\"h6\" align=\"left\">Catch Commands</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <ul>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-catch</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will use pokeballs to catch; Pokémon have a high chance of escaping. Be cautious, these pokéballs are expendable if the catch is successful or not.</Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-gcatch</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will use greatballs, which have a medium chance of escaping. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-ucatch</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">Using ultraballs have a higher chance to catch the Pokémon compared to the rest of the type of balls currently available. </Typography>\n                  </ul>\n                </AccordionDetails>\n              </Accordion>\n            </Grid>\n            <Grid item xs={12}>\n              <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreIcon/>}>\n                  <Typography align=\"left\" variant=\"h6\">Useful Commands</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <ul>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-help</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">Shows a list of commands that the bot currently respond to, with a description for each command. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-profile</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will show you all the basic information about your character. Additional features will be added eventually. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-inventory</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will show you all the items you have obtained so far. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-pokemon</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will open the list of Pokémon you have caught. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-info #</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will show the information of the Pokémon you have in your inventory that correlates with the number. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-info</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">This will show the information of your currently selected Pokémon. </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-invite</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">Will give you the link to invite the bot to your server </Typography>\n                    <li><Typography align=\"left\" variant=\"body1\"><b>-server</b></Typography></li>\n                    <Typography align=\"left\" variant=\"body1\">Will give you the link to join the Official Support Server. </Typography>\n                  </ul>\n                </AccordionDetails>\n              </Accordion>\n            </Grid>\n          </Grid>\n        </StyledPaper>\n      )\n      else return <div></div>\n  }\n}\n\nexport class AppHeader extends React.Component<headerProps_,appState_>{\n\n  render(){\n    return(\n      <AppBar position=\"fixed\">\n        <Grid container  spacing={0} alignItems=\"center\" justify=\"center\">\n          <Grid item>\n            <Logo/>\n          </Grid>\n          <Grid item>\n            <Typography color=\"secondary\" variant=\"h2\">Pokemania</Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <NavigationBar handler={this.props.handler}/>\n          </Grid>\n        </Grid>\n        </AppBar>\n    )\n  }\n}\n\nexport class NavigationBar extends AppHeader{\n  \n  constructor(props:any){\n    super(props);\n    this.state = {selected:\"commands\"};\n    this.changeTab = this.changeTab.bind(this);\n}\nprivate changeTab(event: React.ChangeEvent<{}>,newValue:string){\n    this.setState({selected:newValue});\n    this.props.handler(newValue);\n}\n\nrender(){\n    return(\n        <React.Fragment>\n          <BottomNavigation value={this.state.selected} showLabels onChange={this.changeTab}>\n              <BottomNavigationAction label=\"Commands\" value =\"commands\" icon={<MessageIcon/>}/>\n              <BottomNavigationAction label=\"About\" value=\"about\" icon={<InfoIcon/>}/>\n              <BottomNavigationAction label=\"Staff\" value=\"favorites\" icon={<PeopleIcon/>}/>\n              <BottomNavigationAction label=\"Partners \" value=\"partners\" icon={<MoodIcon/>}/>\n              <BottomNavigationAction label=\"Patreon\" value=\"patreon\" icon={<MonetizationOnIcon/>}/>\n          </BottomNavigation>\n        </React.Fragment>\n        \n    )\n}\n}\n\n\n// interfaces for states and props\nexport interface appState_{\n  selected: string;\n}\n\ninterface headerProps_{\n  handler:any\n}\n\n// Loading Styles and images\nconst useStyles = makeStyles({\n    avatar:{\n      width:theme.spacing(7),\n      height:theme.spacing(7)\n    },\n  });\nconst StyledPaper = styled(Paper)({\n  marginTop:theme.spacing(10),\n  maxWidth: theme.spacing(150),\n});\nconst StyledTitle = styled(Typography)({\n  marginTop:theme.spacing(8),\n  marginLeft:theme.spacing(10),\n  marginRight:theme.spacing(10),\n  marginBottom:theme.spacing(3)\n});\nconst logo = require('./logo.png');\n","import React from 'react';\nimport './App.css';\nimport {ThemeProvider,Grid} from '@material-ui/core';\nimport theme from './theme';\nimport {Logo,NavigationBar,AppHeader,PageContent,appState_} from './elements';\n\n\n\nclass  App extends React.Component<{},appState_>{\n  constructor(props:object){\n    super(props);\n    this.state ={selected:\"commands\"};\n  }\n\n  private changeContent(newValue:string){\n    this.setState({selected:newValue})\n  }\n  \n  render (){\n    return(\n      <div className=\"App\">\n        <ThemeProvider theme={theme}>\n          <Grid container spacing={10} alignItems=\"center\" justify=\"center\">\n            <Grid item md={12}>\n              <AppHeader handler={this.changeContent.bind(this)}/>\n            </Grid>\n            <Grid item>\n                <PageContent selected={this.state.selected}/>\n            </Grid>\n          </Grid>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}